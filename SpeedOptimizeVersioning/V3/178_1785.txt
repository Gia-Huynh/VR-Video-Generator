Worker begin from  1785  to  1795
video_length:  318395 , begin and end:  1785 1795
offset_x:  -13
offset_x:  -12
offset_x:  -11
offset_x:  -10
offset_x:  -9
offset_x:  -8
offset_x:  -7
offset_x:  -6
offset_x:  -5
offset_x:  -4
offset_x:  -3
offset_x:  -2
offset_x:  -1
offset_x:  0
offset_x:  1
offset_x:  2
offset_x:  3
offset_x:  4
offset_x:  4
offset_x:  6
offset_x:  7
offset_x:  8
offset_x:  9
offset_x:  10
offset_x:  11
offset_x:  -13
offset_x:  -12
offset_x:  -11
offset_x:  -10
offset_x:  -9
offset_x:  -8
offset_x:  -7
offset_x:  -6
offset_x:  -5
offset_x:  -4
offset_x:  -3
offset_x:  -2
offset_x:  -1
offset_x:  0
offset_x:  1
offset_x:  2
offset_x:  3
offset_x:  4
offset_x:  4
offset_x:  6
offset_x:  7
offset_x:  8
offset_x:  9
offset_x:  10
offset_x:  11
offset_x:  -13
offset_x:  -12
offset_x:  -11
offset_x:  -10
offset_x:  -9
offset_x:  -8
offset_x:  -7
offset_x:  -6
offset_x:  -5
offset_x:  -4
offset_x:  -3
offset_x:  -2
offset_x:  -1
offset_x:  0
offset_x:  1
offset_x:  2
offset_x:  2
offset_x:  4
offset_x:  5
offset_x:  6
offset_x:  7
offset_x:  8
offset_x:  9
offset_x:  10
offset_x:  11
offset_x:  12
offset_x:  -13
offset_x:  -12
offset_x:  -11
offset_x:  -10
offset_x:  -9
offset_x:  -8
offset_x:  -7
offset_x:  -6
offset_x:  -5
offset_x:  -4
offset_x:  -3
offset_x:  -2
offset_x:  -1
offset_x:  0
offset_x:  1
offset_x:  2
offset_x:  2
offset_x:  4
offset_x:  5
offset_x:  6
offset_x:  7
offset_x:  8
offset_x:  9
offset_x:  10
offset_x:  11
offset_x:  12
offset_x:  -13
offset_x:  -12
offset_x:  -11
offset_x:  -10
offset_x:  -9
offset_x:  -8
offset_x:  -7
offset_x:  -6
offset_x:  -5
offset_x:  -4
offset_x:  -3
offset_x:  -2
offset_x:  -1
offset_x:  0
offset_x:  1
offset_x:  2
offset_x:  2
offset_x:  4
offset_x:  5
offset_x:  6
offset_x:  7
offset_x:  8
offset_x:  9
offset_x:  10
offset_x:  11
offset_x:  12
offset_x:  -13
offset_x:  -12
offset_x:  -11
offset_x:  -10
offset_x:  -9
offset_x:  -8
offset_x:  -7
offset_x:  -6
offset_x:  -5
offset_x:  -4
offset_x:  -3
offset_x:  -2
offset_x:  -1
offset_x:  0
offset_x:  1
offset_x:  2
offset_x:  2
offset_x:  4
offset_x:  5
offset_x:  6
offset_x:  7
offset_x:  8
offset_x:  9
offset_x:  10
offset_x:  11
offset_x:  12
offset_x:  -13
offset_x:  -12
offset_x:  -11
offset_x:  -10
offset_x:  -9
offset_x:  -8
offset_x:  -7
offset_x:  -6
offset_x:  -5
offset_x:  -4
offset_x:  -3
offset_x:  -2
offset_x:  -1
offset_x:  0
offset_x:  1
offset_x:  2
offset_x:  2
offset_x:  4
offset_x:  5
offset_x:  6
offset_x:  7
offset_x:  8
offset_x:  9
offset_x:  10
offset_x:  11
offset_x:  12
offset_x:  -13
offset_x:  -12
offset_x:  -11
offset_x:  -10
offset_x:  -9
offset_x:  -8
offset_x:  -7
offset_x:  -6
offset_x:  -5
offset_x:  -4
offset_x:  -3
offset_x:  -2
offset_x:  -1
offset_x:  0
offset_x:  1
offset_x:  2
offset_x:  2
offset_x:  4
offset_x:  5
offset_x:  6
offset_x:  7
offset_x:  8
offset_x:  9
offset_x:  10
offset_x:  11
offset_x:  12
offset_x:  -13
offset_x:  -12
offset_x:  -11
offset_x:  -10
offset_x:  -9
offset_x:  -8
offset_x:  -7
offset_x:  -6
offset_x:  -5
offset_x:  -4
offset_x:  -3
offset_x:  -2
offset_x:  -1
offset_x:  0
offset_x:  1
offset_x:  2
offset_x:  2
offset_x:  4
offset_x:  5
offset_x:  6
offset_x:  7
offset_x:  8
offset_x:  9
offset_x:  10
offset_x:  11
offset_x:  12
offset_x:  -13
offset_x:  -12
offset_x:  -11
offset_x:  -10
offset_x:  -9
offset_x:  -8
offset_x:  -7
offset_x:  -6
offset_x:  -5
offset_x:  -4
offset_x:  -3
offset_x:  -2
offset_x:  -1
offset_x:  0
offset_x:  1
offset_x:  2
offset_x:  2
offset_x:  4
offset_x:  5
offset_x:  6
offset_x:  7
offset_x:  8
offset_x:  9
offset_x:  10
offset_x:  11
offset_x:  12
Writing file  1794 with length (in frames):  10
 90.0 %, Time elapsed (minutes): 0.18424582481384277 , ETA: 0.020471758312649198 , Estimated Total Time (minutes): 0.204717583126492
ffmpeg pipe write time:  0.060999393463134766
Worker ending
Timer unit: 1e-07 s

Total time: 10.987 s
File: L:\JAV Segmentation 2025\PredictAndGenerate.py
Function: left_side_sbs at line 108

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   108                                           def left_side_sbs(raw_img, inference_queue, result_queue):
   109                                               #Reuse old depth if frame is not much different shenanigan.
   110                                               global last_depth_flag
   111                                               global last_frame
   112                                               global last_depth
   113                                               #Used to be  (np.sum (cv2.absdiff (cv2.stackBlur(raw_img, (5, 5)), cv2.stackBlur(last_frame, (3, 3)))) < 6000000)
   114        10    1354249.0 135424.9      1.2      if (last_frame is not None) and (np.sum (cv2.absdiff (cv2.stackBlur(raw_img, (3, 3)), cv2.stackBlur(last_frame, (3, 3)))) < 2000000) and (last_depth_flag == True):
   115                                                   depth = last_depth
   116                                               else:     
   117        10     702937.0  70293.7      0.6          last_frame = raw_img.copy()
   118        10      12551.0   1255.1      0.0          inference_queue.put((raw_img,)) #Khong can stackblur raw_img vi img cung bi resize ve 518 default cua DepthAnything
   119        10   61615041.0    6e+06     56.1          depth = result_queue.get()
   120        10        175.0     17.5      0.0          if (last_depth_flag == False):
   121         5     205826.0  41165.2      0.2              depth = depth*0.6 + last_depth*0.4
   122         5      62693.0  12538.6      0.1              last_depth = depth.copy()
   123         5         59.0     11.8      0.0              last_depth_flag = True
   124                                                   else:
   125         5         32.0      6.4      0.0              last_depth_flag = False
   126         5      60983.0  12196.6      0.1              last_depth = depth.copy()
   127                                           
   128                                               #Normal image fill
   129        10       1359.0    135.9      0.0      result_blank_mask = np.zeros(raw_img.shape[:2], dtype=bool)
   130        10        608.0     60.8      0.0      result_img = np.zeros(raw_img.shape, dtype=raw_img.dtype)
   131                                               #Edge blurring DOES NOT CONSUME CPU TIME MUCH.
   132        10        603.0     60.3      0.0      edge_fill_blank_mask = np.zeros(raw_img.shape[:2], dtype=bool)
   133        10      16150.0   1615.0      0.0      limit_step = math.ceil(depth.max())
   134        10        283.0     28.3      0.0      offset_range = [offset_bg * raw_img.shape[0], offset_fg * raw_img.shape[0] * limit_step/14.0]
   135        10         42.0      4.2      0.0      max_depth = limit_step
   136        10        230.0     23.0      0.0      kernel_size = round(0.0047 * raw_img.shape[0]) #0.0047 is the OG, then 0.0036 works fine, 0.0024 is a bit too low.
   137        10       1732.0    173.2      0.0      kernel_expand = np.ones ((max(kernel_size, 1),  max(kernel_size, 1)))
   138                                               #Threshold values
   139                                               #cutoff_list = sorted(get_cutoff(depth, last_depth))
   140                                               #step_list = [cutoff_list[i+1]-cutoff_list[i] for i in range(len(cutoff_list)-1)]
   141                                               #t = cutoff_list.pop() #Remove last element
   142                                           	#last_offset_x = None
   143                                           	#last_i = None
   144                                           	#new_cutoff_list = cutoff_list.copy()
   145        10         41.0      4.1      0.0      """for i, curr_step in zip(cutoff_list, step_list):
   146                                                   offset_x = int((i+0.5*curr_step) / (0.00001+limit_step - curr_step) * (0.00001+offset_range[1] - offset_range[0]) + offset_range[0])
   147                                           		if (last_offset_x is None):
   148                                           			last_offset_x = offset_x
   149                                           			last_i = i
   150                                           			continue
   151                                           		if (offset_x - last_offset_x > 1):
   152                                           			#Find a value to insert
   153                                           			new_cutoff_list.insert ((last_offset_x + 1 - offset_range[0]) / (0.00001+offset_range[1] - offset_range[0]) * (0.00001+limit_step) )
   154                                           		last_i = i"""
   155        10         48.0      4.8      0.0      cutoff_list = []
   156       278       1006.0      3.6      0.0      for i in range (int(offset_range[0])-1, int(offset_range[1])+1):
   157       268       1779.0      6.6      0.0          cutoff_list.append ((i - offset_range[0]) / (0.00001+offset_range[1] - offset_range[0]) * (0.00001+limit_step) )
   158        10        220.0     22.0      0.0      cutoff_list = sorted (cutoff_list)
   159        10       1105.0    110.5      0.0      step_list = [cutoff_list[i+1]-cutoff_list[i] for i in range(len(cutoff_list)-1)]
   160                                               
   161       268       3613.0     13.5      0.0      for i, curr_step in zip(cutoff_list, step_list):
   162       258    4457073.0  17275.5      4.1          bin_mask = (((i - 0.02 * curr_step) <= depth) & (depth < i + 1.02 * curr_step)).astype(bool)
   163                                           
   164       258   10707634.0  41502.5      9.7          rows, cols = np.nonzero(bin_mask)
   165                                                   #masked_img = np.zeros_like(raw_img)
   166                                                   #masked_img[rows, cols, :] = raw_img[rows, cols, :]
   167                                                   #offset_x = int((i+0.5*curr_step) / (0.00001+limit_step - curr_step) * (0.00001+offset_range[1] - offset_range[0]) + offset_range[0])
   168       258       9093.0     35.2      0.0          offset_x = int((i) / (0.00001+limit_step) * (0.00001+offset_range[1] - offset_range[0]) + offset_range[0])
   169       258      42120.0    163.3      0.0          print ("offset_x: ", offset_x)
   170       258       1102.0      4.3      0.0          if offset_x != 0:
   171                                                       #Room for Optimization: np.roll
   172                                                       #https://gist.github.com/cchwala/dea03fb55d9a50660bd52e00f5691db5
   173                                                       #masked_img = np.roll(raw_img, shift=offset_x, axis=1)  # Shift along the width (x-axis)
   174                                                       #masked_mask = np.roll(masked_mask, shift=offset_x, axis=1).astype (np.bool)
   175       248    1742676.0   7026.9      1.6              bin_mask = np.roll(bin_mask, shift=offset_x, axis=1).astype (np.bool)
   176       258     142082.0    550.7      0.1          masked_mask = bin_mask
   177                                                   #This one is for edge filling for "close-by" objects
   178       258       1648.0      6.4      0.0          if (offset_x > 0):
   179       118    6396031.0  54203.7      5.8             edge_fill_blank_mask |= cv2.filter2D(masked_mask.astype(np.int16), -1, np.array([[1, -2, 1]], dtype=np.int16))>0
   180                                                   
   181                                           		#As fast as you can get here
   182       258   10690871.0  41437.5      9.7          rows, cols = np.nonzero(bin_mask)
   183       258    8303287.0  32183.3      7.6          result_img[rows, cols, :] = np.roll(raw_img, shift=offset_x, axis=1)[rows, cols, :]# masked_img [rows, cols, :]
   184       258     341282.0   1322.8      0.3          result_blank_mask |= masked_mask
   185                                           
   186        10      26841.0   2684.1      0.0      result_zero_mask = ~result_blank_mask  # inverted boolean mask where no pixel was filled
   187        10     172815.0  17281.5      0.2      result_zero_mask = cv2.morphologyEx(result_zero_mask.astype(np.uint8), cv2.MORPH_CLOSE, kernel_expand) #BETTER
   188                                               #Fill result_img with blurred value from zero_mask
   189        10     109051.0  10905.1      0.1      result_zero_mask = result_zero_mask.astype(bool)
   190        30    1497321.0  49910.7      1.4      result_img[result_zero_mask] = (cv2.stackBlur
   191        20      99567.0   4978.4      0.1                                      (np.roll
   192        10        283.0     28.3      0.0                                       (raw_img, shift=round(offset_x/3), axis=1)
   193        10        201.0     20.1      0.0                                      ,(limit_step*2 + 3, round(limit_step/8)*2 + 1)
   194                                                                               )
   195        10         54.0      5.4      0.0                                     )[result_zero_mask]
   196                                               #Is this line necessary?
   197                                               #edge_fill_blank_mask = cv2.dilate(edge_fill_blank_mask.view(np.uint8), np.ones((1, 3)), iterations = 1).astype(bool)
   198                                           
   199        10     635855.0  63585.5      0.6      result_img[edge_fill_blank_mask] = cv2.stackBlur (result_img, (kernel_size+(kernel_size%2==0), kernel_size+(kernel_size%2==0)))[edge_fill_blank_mask]
   200                                           
   201        10      12516.0   1251.6      0.0      result_img[:, 0:round(offset_x/3), :] = raw_img[:, 0:round(offset_x/3), :]
   202        10         64.0      6.4      0.0      if last_frame is not None:
   203        10     437050.0  43705.0      0.4          return cv2.hconcat([result_img, last_frame])
   204                                               else:
   205                                                   return cv2.hconcat([result_img, raw_img])

Total time: 0 s
File: L:\JAV Segmentation 2025\SupportFunction.py
Function: get_cutoff at line 86

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    86                                           def get_cutoff (depth_img, last_depth):
    87                                               #Getting cutoff locations from depth_img    
    88                                               #DO NOT FUCKING MODIFY THIS FUNCTION, WE HAVE TESTED IT A LOT IN THE PAST AND FUCKING LEAVE IT BE
    89                                               step_width = 0.125
    90                                               bin_range = np.arange(0, depth_img.max(), step_width)
    91                                               profile_temp_var = np.digitize (depth_img, bin_range)
    92                                               a, bin_count = np.unique(profile_temp_var, return_counts = True)
    93                                               bin_count_avg = np.zeros (bin_count.shape)
    94                                           
    95                                               for j in range (1, len(bin_count)-1):
    96                                                   bin_count_avg [j] = 0.33 * bin_count[j] + 0.33 * bin_count[j-1] + 0.33 * bin_count[j+1]
    97                                               bin_count_avg [0] = 0.5 * bin_count[0] + 0.5 * bin_count[j+1]
    98                                               bin_count_avg [len(bin_count)-1] = 0.5 * bin_count[len(bin_count)-1] + 0.5 * bin_count[len(bin_count)-2]
    99                                               bin_count = bin_count_avg
   100                                               
   101                                               bin_label = bin_range[a-1]
   102                                               
   103                                               Result_Cutoff_List = []
   104                                               Max = -1
   105                                               MaxIdx = -1
   106                                               assert (len(bin_label) == len(bin_count))
   107                                               for i in range (1, len(bin_label)-1):
   108                                                   label = bin_label[i+1]
   109                                                   count = bin_count[i]
   110                                                   if (Max == -1):
   111                                                       Max = count
   112                                                       MaxIdx = i
   113                                                   else:
   114                                                       if (Max < count):
   115                                                           Max = count
   116                                                           MaxIdx = i
   117                                                       else:
   118                                           UnicodeEncodeError - help wanted for a fix
   119                                                               ((count *(1 - 0.0125*(Max/count)) < bin_count[i+1] * 0.96) 
   120                                                                    and (count *(1 - 0.0125*(Max/count)) < bin_count[i-1] * 0.99)
   121                                                                 and (i - MaxIdx >= round(0.5/step_width - 1)))
   122                                           UnicodeEncodeError - help wanted for a fix
   123                                                               or ((count *(1.01 - 0.01*(Max/count)) < bin_count[i+1] * 0.93)
   124                                                                    and (count *(1.01 - 0.01*(Max/count)) < bin_count[i-1] * 0.8)
   125                                                                    )
   126                                                               ):
   127                                                               Result_Cutoff_List.append (label)
   128                                                               Max = count
   129                                                               MaxIdx = i
   130                                           
   131                                               #Result_Cutoff_List = sorted (Result_Cutoff_List)
   132                                               Result_Cutoff_List.append(depth_img.max())
   133                                               Result_Cutoff_List.insert (0, 0)
   134                                               Result_Cutoff_List = sorted (Result_Cutoff_List)
   135                                               
   136                                               for i in range (len(Result_Cutoff_List)-2, 0, -1):
   137                                                   if abs(Result_Cutoff_List[i] - Result_Cutoff_List[i+1])<1:
   138                                                       del Result_Cutoff_List[i]
   139                                               global last_cutoff
   140                                               if (last_cutoff is not None):
   141                                                   if (np.linalg.norm(depth_img - last_depth) < 500):
   142                                                       if (len(last_cutoff) >= len(Result_Cutoff_List)):
   143                                                           return last_cutoff
   144                                                       else:
   145                                                           pass
   146                                                   else:
   147                                                       pass
   148                                                       #print ("Norm Declined: ", np.linalg.norm(depth_img - last_depth))
   149                                               last_cutoff = Result_Cutoff_List
   150                                               return Result_Cutoff_List

